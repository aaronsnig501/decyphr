from django.conf import settings
import boto3
from languages.models import Language

# Initialize the two AWS clients. We need a translator client,
# and a polly client. These are initialized mostly using the
# configuration in `settings`
_translator = boto3.client(
    "translate",
    settings.REGION,
    aws_access_key_id=settings.ACCESS_KEY_ID,
    aws_secret_access_key=settings.SECRET_ACCESS_KEY,
)
_polly = boto3.client(
    "polly",
    settings.REGION,
    aws_access_key_id=settings.ACCESS_KEY_ID,
    aws_secret_access_key=settings.SECRET_ACCESS_KEY,
)


def _generate_audio_file(text, new_language):
    """
    The audio file that is necessary for playing back the audio
    for a user to listen, is generated by Polly and stored on S3.

    The function invokes the service to generate the audio file
    and returns the location
    """
    response = _polly.start_speech_synthesis_task(
        Engine=settings.POLLY_CONFIG["engine"],
        LanguageCode=new_language.code,
        OutputFormat=settings.POLLY_CONFIG["output_format"],
        OutputS3BucketName=settings.BUCKET_NAME,
        Text=text,
        TextType=settings.POLLY_CONFIG["text_type"],
        VoiceId="Ricardo",
    )
    return response["SynthesisTask"]["OutputUri"]


def _translate_text(text, first_language, new_language):
    """
    Takes a piece of text and invokes the AWS Translate service to
    translate it.

    Returns the translated text
    """
    response = _translator.translate_text(
        Text=text,
        SourceLanguageCode=new_language.short_code,
        TargetLanguageCode=first_language.short_code,
    )
    return response["TranslatedText"]


def bundle_aws_data(text, user):
    """
    Collects the data from the two primary AWS interface functions
    and bundles it up into a dictionary and returns that dictionary
    """
    new_text = _translate_text(text, user.first_language, user.language_being_learned)
    path_to_audio_file = _generate_audio_file(text, user.language_being_learned)
    new_data = {
        "source_text": text,
        "translated_text": new_text,
        "audio_file_path": path_to_audio_file,
        "source_language": user.language_being_learned.id,
        "target_language": user.first_language.id,
        "user": user.id,
    }
    return new_data
